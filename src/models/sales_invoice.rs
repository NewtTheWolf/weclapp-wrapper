/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SalesInvoice {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "cancellationDate", skip_serializing_if = "Option::is_none")]
    pub cancellation_date: Option<i32>,
    #[serde(rename = "cancellationNumber", skip_serializing_if = "Option::is_none")]
    pub cancellation_number: Option<String>,
    #[serde(
        rename = "collectiveInvoicePositionPrintType",
        skip_serializing_if = "Option::is_none"
    )]
    pub collective_invoice_position_print_type: Option<CollectiveInvoicePositionPrintType>,
    #[serde(rename = "commercialLanguage", skip_serializing_if = "Option::is_none")]
    pub commercial_language: Option<String>,
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    #[serde(
        rename = "commissionSalesPartners",
        skip_serializing_if = "Option::is_none"
    )]
    pub commission_sales_partners: Option<Vec<crate::models::CommissionSalesPartner>>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(
        rename = "currencyConversionDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub currency_conversion_date: Option<i32>,
    #[serde(
        rename = "currencyConversionRate",
        skip_serializing_if = "Option::is_none"
    )]
    pub currency_conversion_rate: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(
        rename = "customerHabitualExporterLetterOfIntentId",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_habitual_exporter_letter_of_intent_id: Option<String>,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "customerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
    #[serde(rename = "deliveryAddress", skip_serializing_if = "Option::is_none")]
    pub delivery_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "deliveryDate", skip_serializing_if = "Option::is_none")]
    pub delivery_date: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "disableEmailTemplate",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_email_template: Option<bool>,
    #[serde(
        rename = "dispatchCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub dispatch_country_code: Option<String>,
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<i32>,
    #[serde(rename = "factoring", skip_serializing_if = "Option::is_none")]
    pub factoring: Option<bool>,
    #[serde(rename = "grossAmount", skip_serializing_if = "Option::is_none")]
    pub gross_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(
        rename = "grossAmountInCompanyCurrency",
        skip_serializing_if = "Option::is_none"
    )]
    pub gross_amount_in_company_currency:
        Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "headerDiscount", skip_serializing_if = "Option::is_none")]
    pub header_discount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "headerSurcharge", skip_serializing_if = "Option::is_none")]
    pub header_surcharge: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "invoiceDate", skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<i32>,
    #[serde(rename = "invoiceNumber", skip_serializing_if = "Option::is_none")]
    pub invoice_number: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "netAmount", skip_serializing_if = "Option::is_none")]
    pub net_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(
        rename = "netAmountInCompanyCurrency",
        skip_serializing_if = "Option::is_none"
    )]
    pub net_amount_in_company_currency:
        Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "nonStandardTaxId", skip_serializing_if = "Option::is_none")]
    pub non_standard_tax_id: Option<String>,
    #[serde(rename = "nonStandardTaxName", skip_serializing_if = "Option::is_none")]
    pub non_standard_tax_name: Option<String>,
    #[serde(
        rename = "orderNumberAtCustomer",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_number_at_customer: Option<String>,
    #[serde(rename = "paid", skip_serializing_if = "Option::is_none")]
    pub paid: Option<bool>,
    #[serde(rename = "paymentMethodId", skip_serializing_if = "Option::is_none")]
    pub payment_method_id: Option<String>,
    #[serde(rename = "paymentMethodName", skip_serializing_if = "Option::is_none")]
    pub payment_method_name: Option<String>,
    #[serde(rename = "paymentStatus")]
    pub payment_status: PaymentStatus,
    #[serde(rename = "pricingDate", skip_serializing_if = "Option::is_none")]
    pub pricing_date: Option<i32>,
    #[serde(rename = "recordAddress", skip_serializing_if = "Option::is_none")]
    pub record_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "recordComment", skip_serializing_if = "Option::is_none")]
    pub record_comment: Option<String>,
    #[serde(rename = "recordCurrencyId", skip_serializing_if = "Option::is_none")]
    pub record_currency_id: Option<String>,
    #[serde(rename = "recordCurrencyName", skip_serializing_if = "Option::is_none")]
    pub record_currency_name: Option<String>,
    #[serde(
        rename = "recordEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub record_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(rename = "recordFreeText", skip_serializing_if = "Option::is_none")]
    pub record_free_text: Option<String>,
    #[serde(rename = "recordOpening", skip_serializing_if = "Option::is_none")]
    pub record_opening: Option<String>,
    #[serde(rename = "responsibleUserId", skip_serializing_if = "Option::is_none")]
    pub responsible_user_id: Option<String>,
    #[serde(
        rename = "responsibleUserUsername",
        skip_serializing_if = "Option::is_none"
    )]
    pub responsible_user_username: Option<String>,
    #[serde(rename = "salesChannel", skip_serializing_if = "Option::is_none")]
    pub sales_channel: Option<String>,
    #[serde(rename = "salesInvoiceItems", skip_serializing_if = "Option::is_none")]
    pub sales_invoice_items: Option<Vec<crate::models::SalesInvoiceItem>>,
    #[serde(rename = "salesInvoiceType", skip_serializing_if = "Option::is_none")]
    pub sales_invoice_type: Option<SalesInvoiceType>,
    #[serde(rename = "salesOrderId", skip_serializing_if = "Option::is_none")]
    pub sales_order_id: Option<String>,
    #[serde(rename = "salesOrderNumber", skip_serializing_if = "Option::is_none")]
    pub sales_order_number: Option<String>,
    #[serde(rename = "salesOrders", skip_serializing_if = "Option::is_none")]
    pub sales_orders: Option<Vec<crate::models::OnlyId>>,
    #[serde(rename = "sentToRecipient", skip_serializing_if = "Option::is_none")]
    pub sent_to_recipient: Option<bool>,
    #[serde(rename = "servicePeriodFrom", skip_serializing_if = "Option::is_none")]
    pub service_period_from: Option<i32>,
    #[serde(rename = "servicePeriodTo", skip_serializing_if = "Option::is_none")]
    pub service_period_to: Option<i32>,
    #[serde(rename = "shipmentMethodId", skip_serializing_if = "Option::is_none")]
    pub shipment_method_id: Option<String>,
    #[serde(rename = "shipmentMethodName", skip_serializing_if = "Option::is_none")]
    pub shipment_method_name: Option<String>,
    #[serde(rename = "shippingCostItems", skip_serializing_if = "Option::is_none")]
    pub shipping_cost_items: Option<Vec<crate::models::SalesShippingCostItem>>,
    #[serde(rename = "shippingDate", skip_serializing_if = "Option::is_none")]
    pub shipping_date: Option<i32>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "statusHistory", skip_serializing_if = "Option::is_none")]
    pub status_history: Option<Vec<crate::models::SalesInvoiceStatusHistory>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "termOfPaymentId", skip_serializing_if = "Option::is_none")]
    pub term_of_payment_id: Option<String>,
    #[serde(rename = "termOfPaymentName", skip_serializing_if = "Option::is_none")]
    pub term_of_payment_name: Option<String>,
    #[serde(
        rename = "vatRegistrationNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub vat_registration_number: Option<String>,
}

impl SalesInvoice {
    pub fn new(customer_id: String, payment_status: PaymentStatus, status: Status) -> SalesInvoice {
        SalesInvoice {
            id: None,
            version: None,
            cancellation_date: None,
            cancellation_number: None,
            collective_invoice_position_print_type: None,
            commercial_language: None,
            commission: None,
            commission_sales_partners: None,
            created_date: None,
            currency_conversion_date: None,
            currency_conversion_rate: None,
            custom_attributes: None,
            customer_habitual_exporter_letter_of_intent_id: None,
            customer_id,
            customer_number: None,
            delivery_address: None,
            delivery_date: None,
            description: None,
            disable_email_template: None,
            dispatch_country_code: None,
            due_date: None,
            factoring: None,
            gross_amount: None,
            gross_amount_in_company_currency: None,
            header_discount: None,
            header_surcharge: None,
            invoice_date: None,
            invoice_number: None,
            last_modified_date: None,
            net_amount: None,
            net_amount_in_company_currency: None,
            non_standard_tax_id: None,
            non_standard_tax_name: None,
            order_number_at_customer: None,
            paid: None,
            payment_method_id: None,
            payment_method_name: None,
            payment_status,
            pricing_date: None,
            record_address: None,
            record_comment: None,
            record_currency_id: None,
            record_currency_name: None,
            record_email_addresses: None,
            record_free_text: None,
            record_opening: None,
            responsible_user_id: None,
            responsible_user_username: None,
            sales_channel: None,
            sales_invoice_items: None,
            sales_invoice_type: None,
            sales_order_id: None,
            sales_order_number: None,
            sales_orders: None,
            sent_to_recipient: None,
            service_period_from: None,
            service_period_to: None,
            shipment_method_id: None,
            shipment_method_name: None,
            shipping_cost_items: None,
            shipping_date: None,
            status,
            status_history: None,
            tags: None,
            term_of_payment_id: None,
            term_of_payment_name: None,
            vat_registration_number: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CollectiveInvoicePositionPrintType {
    #[serde(rename = "ORDER_POSITION_GROUP")]
    OrderPositionGroup,
    #[serde(rename = "PERFORMANCE_RECORD_POSITION_GROUP")]
    PerformanceRecordPositionGroup,
    #[serde(rename = "SHIPMENT_POSITION_GROUP")]
    ShipmentPositionGroup,
}

impl Default for CollectiveInvoicePositionPrintType {
    fn default() -> CollectiveInvoicePositionPrintType {
        Self::OrderPositionGroup
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "CLEARED_WITH_CREDIT_NOTE")]
    ClearedWithCreditNote,
    #[serde(rename = "CREDIT_NOTE_CLEARED")]
    CreditNoteCleared,
    #[serde(rename = "NO_OPEN_ITEM")]
    NoOpenItem,
    #[serde(rename = "OPEN")]
    Open,
    #[serde(rename = "PAID")]
    Paid,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::ClearedWithCreditNote
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SalesInvoiceType {
    #[serde(rename = "ADVANCE_PAYMENT_INVOICE")]
    AdvancePaymentInvoice,
    #[serde(rename = "CREDIT_NOTE")]
    CreditNote,
    #[serde(rename = "FINAL_INVOICE")]
    FinalInvoice,
    #[serde(rename = "PART_PAYMENT_INVOICE")]
    PartPaymentInvoice,
    #[serde(rename = "PREPAYMENT_INVOICE")]
    PrepaymentInvoice,
    #[serde(rename = "STANDARD_INVOICE")]
    StandardInvoice,
}

impl Default for SalesInvoiceType {
    fn default() -> SalesInvoiceType {
        Self::AdvancePaymentInvoice
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "DOCUMENT_CREATED")]
    DocumentCreated,
    #[serde(rename = "ENTRY_COMPLETED")]
    EntryCompleted,
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "OPEN_ITEM_CREATED")]
    OpenItemCreated,
    #[serde(rename = "VOID")]
    Void,
}

impl Default for Status {
    fn default() -> Status {
        Self::DocumentCreated
    }
}
