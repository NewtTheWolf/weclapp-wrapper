/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemotePrintJob {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "documentId")]
    pub document_id: String,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "printStatus")]
    pub print_status: PrintStatus,
    #[serde(rename = "printerName")]
    pub printer_name: String,
    #[serde(rename = "quantity")]
    pub quantity: i32,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(
        rename = "weclappOsHardwareId",
        skip_serializing_if = "Option::is_none"
    )]
    pub weclapp_os_hardware_id: Option<String>,
    #[serde(rename = "weclappOsId")]
    pub weclapp_os_id: String,
}

impl RemotePrintJob {
    pub fn new(
        document_id: String,
        print_status: PrintStatus,
        printer_name: String,
        quantity: i32,
        weclapp_os_id: String,
    ) -> RemotePrintJob {
        RemotePrintJob {
            id: None,
            version: None,
            created_date: None,
            document_id,
            last_modified_date: None,
            print_status,
            printer_name,
            quantity,
            user_id: None,
            weclapp_os_hardware_id: None,
            weclapp_os_id,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PrintStatus {
    #[serde(rename = "DOCUMENT_NOT_FOUND")]
    DocumentNotFound,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "PRINTED")]
    Printed,
    #[serde(rename = "SUBMITTED")]
    Submitted,
    #[serde(rename = "UNKNOWN_PRINTER")]
    UnknownPrinter,
}

impl Default for PrintStatus {
    fn default() -> PrintStatus {
        Self::DocumentNotFound
    }
}
