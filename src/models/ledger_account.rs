/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LedgerAccount {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "automatic", skip_serializing_if = "Option::is_none")]
    pub automatic: Option<bool>,
    #[serde(rename = "balanceSheetItem", skip_serializing_if = "Option::is_none")]
    pub balance_sheet_item: Option<BalanceSheetItem>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "parentAccountId", skip_serializing_if = "Option::is_none")]
    pub parent_account_id: Option<String>,
    #[serde(
        rename = "parentAccountNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_account_number: Option<String>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
}

impl LedgerAccount {
    pub fn new(r#type: RHashType) -> LedgerAccount {
        LedgerAccount {
            id: None,
            version: None,
            account_number: None,
            automatic: None,
            balance_sheet_item: None,
            created_date: None,
            description: None,
            last_modified_date: None,
            parent_account_id: None,
            parent_account_number: None,
            r#type,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BalanceSheetItem {
    #[serde(rename = "ABSCHREIBUNGEN_GWG_ACCOUNTS")]
    AbschreibungenGwgAccounts,
    #[serde(rename = "ABSCHREIBUNGEN_UND_ANLAGEVERMOEGEN_ACCOUNTS")]
    AbschreibungenUndAnlagevermoegenAccounts,
    #[serde(rename = "BESONDERE_AUFWENDUNGEN_ACCOUNTS")]
    BesondereAufwendungenAccounts,
    #[serde(rename = "BUCHWERT_ANLAGENABGAENGE_ACCOUNTS")]
    BuchwertAnlagenabgaengeAccounts,
    #[serde(rename = "FREMDLEISTUNGEN_ACCOUNTS")]
    FremdleistungenAccounts,
    #[serde(rename = "GAS_STROM_ACCOUNTS")]
    GasStromAccounts,
    #[serde(rename = "GELEISTETE_ANZAHLUNGEN_ACCOUNTS")]
    GeleisteteAnzahlungenAccounts,
    #[serde(rename = "GESETZLICHE_SOZIALE_AUFWENDUNGEN_ACCOUNTS")]
    GesetzlicheSozialeAufwendungenAccounts,
    #[serde(rename = "HEIZUNG_ACCOUNTS")]
    HeizungAccounts,
    #[serde(rename = "INSTANDHALTUNG_ACCOUNTS")]
    InstandhaltungAccounts,
    #[serde(rename = "INSTANDHALTUNG_UND_WERKZEUGE_ACCOUNTS")]
    InstandhaltungUndWerkzeugeAccounts,
    #[serde(rename = "KFZ_SONSTIGE_ACCOUNTS")]
    KfzSonstigeAccounts,
    #[serde(rename = "KFZ_STEUER_ACCOUNTS")]
    KfzSteuerAccounts,
    #[serde(rename = "KFZ_VERSICHERUNG_ACCOUNTS")]
    KfzVersicherungAccounts,
    #[serde(rename = "KOSTEN_DER_WARENABGABE_ACCOUNTS")]
    KostenDerWarenabgabeAccounts,
    #[serde(rename = "LOEHENE_UND_GEHAELTER_ACCOUNTS")]
    LoeheneUndGehaelterAccounts,
    #[serde(rename = "MIETE_PACHT_ACCOUNTS")]
    MietePachtAccounts,
    #[serde(rename = "NEUTRALE_AUFWENDUNGEN_ACCOUNTS")]
    NeutraleAufwendungenAccounts,
    #[serde(rename = "NEUTRALE_ERTRAEGE_ACCOUNTS")]
    NeutraleErtraegeAccounts,
    #[serde(rename = "PRIVAT_ANTEILE_ACCOUNTS")]
    PrivatAnteileAccounts,
    #[serde(rename = "REVENUE_ACCOUNTS")]
    RevenueAccounts,
    #[serde(rename = "ROH_HILFS_UNDBETRIE_BSSTOFFE_ACCOUNTS")]
    RohHilfsUndbetrieBsstoffeAccounts,
    #[serde(rename = "SALDO_DER_STATISTISCHEN_KONTEN_ACCOUNTS")]
    SaldoDerStatistischenKontenAccounts,
    #[serde(rename = "SONSTIGE_ERLOESE_ACCOUNTS")]
    SonstigeErloeseAccounts,
    #[serde(rename = "SONSTIGE_KONTEN_ACCOUNTS")]
    SonstigeKontenAccounts,
    #[serde(rename = "SONSTIGE_RAUMKOSTEN_ACCOUNTS")]
    SonstigeRaumkostenAccounts,
    #[serde(rename = "STEUERN_VERSICHERUNGEN_BEITRAEGE_ACCOUNTS")]
    SteuernVersicherungenBeitraegeAccounts,
    #[serde(rename = "UMSATZSTEUER_ACCOUNTS")]
    UmsatzsteuerAccounts,
    #[serde(rename = "UMSATZSTEUER_ZAHLUNGEN_ACCOUNTS")]
    UmsatzsteuerZahlungenAccounts,
    #[serde(rename = "VERSCHIEDENE_KOSTEN_ACCOUNTS")]
    VerschiedeneKostenAccounts,
    #[serde(rename = "VORSTEUER_ACCOUNTS")]
    VorsteuerAccounts,
    #[serde(rename = "WERBE_UND_REISEKOSTEN_ACCOUNTS")]
    WerbeUndReisekostenAccounts,
}

impl Default for BalanceSheetItem {
    fn default() -> BalanceSheetItem {
        Self::AbschreibungenGwgAccounts
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "CARRY_FORWARD_ACCOUNT")]
    CarryForwardAccount,
    #[serde(rename = "IMPERSONAL_ACCOUNT")]
    ImpersonalAccount,
    #[serde(rename = "PERSONAL_ACCOUNT")]
    PersonalAccount,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::CarryForwardAccount
    }
}
