/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccountingTransaction {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "accountingImportDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub accounting_import_date: Option<i32>,
    #[serde(rename = "conversionRate", skip_serializing_if = "Option::is_none")]
    pub conversion_rate: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "conversionRateDate", skip_serializing_if = "Option::is_none")]
    pub conversion_rate_date: Option<i32>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "currencyId")]
    pub currency_id: String,
    #[serde(rename = "currencyName", skip_serializing_if = "Option::is_none")]
    pub currency_name: Option<String>,
    #[serde(rename = "draft", skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[serde(
        rename = "externalRecordNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_record_number: Option<String>,
    #[serde(
        rename = "internalRecordNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub internal_record_number: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "reverseTransaction", skip_serializing_if = "Option::is_none")]
    pub reverse_transaction: Option<bool>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "transactionDate", skip_serializing_if = "Option::is_none")]
    pub transaction_date: Option<i32>,
    #[serde(rename = "transactionDetails", skip_serializing_if = "Option::is_none")]
    pub transaction_details: Option<Vec<crate::models::AccountingTransactionDetail>>,
    #[serde(
        rename = "transactionEstablishDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub transaction_establish_date: Option<i32>,
    #[serde(rename = "transactionNumber", skip_serializing_if = "Option::is_none")]
    pub transaction_number: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
}

impl AccountingTransaction {
    pub fn new(currency_id: String) -> AccountingTransaction {
        AccountingTransaction {
            id: None,
            version: None,
            accounting_import_date: None,
            conversion_rate: None,
            conversion_rate_date: None,
            created_date: None,
            currency_id,
            currency_name: None,
            draft: None,
            external_record_number: None,
            internal_record_number: None,
            last_modified_date: None,
            reverse_transaction: None,
            status: None,
            transaction_date: None,
            transaction_details: None,
            transaction_establish_date: None,
            transaction_number: None,
            r#type: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "DRAFT")]
    Draft,
    #[serde(rename = "ESTABLISHED")]
    Established,
    #[serde(rename = "PREBATCHBOOKING")]
    Prebatchbooking,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "CARRY_FORWARD")]
    CarryForward,
    #[serde(rename = "IMPERSONAL")]
    Impersonal,
    #[serde(rename = "INCOMING_CREDIT_NOTE")]
    IncomingCreditNote,
    #[serde(rename = "INCOMING_INVOICE")]
    IncomingInvoice,
    #[serde(rename = "INCOMING_PAYMENT")]
    IncomingPayment,
    #[serde(rename = "OUTGOING_CREDIT_NOTE")]
    OutgoingCreditNote,
    #[serde(rename = "OUTGOING_INVOICE")]
    OutgoingInvoice,
    #[serde(rename = "OUTGOING_PAYMENT")]
    OutgoingPayment,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::CarryForward
    }
}
