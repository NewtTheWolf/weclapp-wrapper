/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProductionWorkSchedule {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "workScheduleItems", skip_serializing_if = "Option::is_none")]
    pub work_schedule_items: Option<Vec<crate::models::ProductionWorkScheduleItem>>,
    #[serde(rename = "workScheduleNumber")]
    pub work_schedule_number: String,
}

impl ProductionWorkSchedule {
    pub fn new(status: Status, work_schedule_number: String) -> ProductionWorkSchedule {
        ProductionWorkSchedule {
            id: None,
            version: None,
            created_date: None,
            custom_attributes: None,
            description: None,
            last_modified_date: None,
            status,
            work_schedule_items: None,
            work_schedule_number,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "ENTRY_IN_PROGRESS")]
    EntryInProgress,
    #[serde(rename = "INVALID")]
    Invalid,
}

impl Default for Status {
    fn default() -> Status {
        Self::Approved
    }
}
