/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PartyHabitualExporterLetterOfIntent {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "automaticallySuggestInInvoice",
        skip_serializing_if = "Option::is_none"
    )]
    pub automatically_suggest_in_invoice: Option<bool>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "date")]
    pub date: i32,
    #[serde(rename = "fromSupplier", skip_serializing_if = "Option::is_none")]
    pub from_supplier: Option<bool>,
    #[serde(rename = "invoices", skip_serializing_if = "Option::is_none")]
    pub invoices: Option<Vec<crate::models::OnlyId>>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "numberDeclarer")]
    pub number_declarer: String,
    #[serde(rename = "numberSupplier", skip_serializing_if = "Option::is_none")]
    pub number_supplier: Option<String>,
    #[serde(rename = "totalAmount", skip_serializing_if = "Option::is_none")]
    pub total_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
}

impl PartyHabitualExporterLetterOfIntent {
    pub fn new(
        date: i32,
        number_declarer: String,
        r#type: RHashType,
    ) -> PartyHabitualExporterLetterOfIntent {
        PartyHabitualExporterLetterOfIntent {
            id: None,
            version: None,
            automatically_suggest_in_invoice: None,
            created_date: None,
            date,
            from_supplier: None,
            invoices: None,
            last_modified_date: None,
            number_declarer,
            number_supplier: None,
            total_amount: None,
            r#type,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "MULTIPLE_ACCOUNTING_EVENTS")]
    MultipleAccountingEvents,
    #[serde(rename = "SINGLE_ACCOUNTING_EVENT")]
    SingleAccountingEvent,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::MultipleAccountingEvents
    }
}
