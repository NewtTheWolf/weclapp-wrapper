/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Ticket {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "assignedUserId", skip_serializing_if = "Option::is_none")]
    pub assigned_user_id: Option<String>,
    #[serde(rename = "billable", skip_serializing_if = "Option::is_none")]
    pub billable: Option<bool>,
    #[serde(rename = "ccEmailAddresses", skip_serializing_if = "Option::is_none")]
    pub cc_email_addresses: Option<String>,
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<String>,
    #[serde(rename = "contractId", skip_serializing_if = "Option::is_none")]
    pub contract_id: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "disableEmailTemplates",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_email_templates: Option<bool>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "entityReferences", skip_serializing_if = "Option::is_none")]
    pub entity_references: Option<Vec<crate::models::EntityReference>>,
    #[serde(rename = "finishedDate", skip_serializing_if = "Option::is_none")]
    pub finished_date: Option<i32>,
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "followUpDate", skip_serializing_if = "Option::is_none")]
    pub follow_up_date: Option<i32>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "legacyArticleId", skip_serializing_if = "Option::is_none")]
    pub legacy_article_id: Option<String>,
    #[serde(
        rename = "legacyTimeAndMaterialTicket",
        skip_serializing_if = "Option::is_none"
    )]
    pub legacy_time_and_material_ticket: Option<bool>,
    #[serde(rename = "mail2TicketId", skip_serializing_if = "Option::is_none")]
    pub mail2_ticket_id: Option<String>,
    #[serde(rename = "mobilePhoneNumber", skip_serializing_if = "Option::is_none")]
    pub mobile_phone_number: Option<String>,
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    #[serde(rename = "partyId", skip_serializing_if = "Option::is_none")]
    pub party_id: Option<String>,
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    #[serde(
        rename = "publicPageExpirationDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_page_expiration_date: Option<i32>,
    #[serde(rename = "publicPageUuid", skip_serializing_if = "Option::is_none")]
    pub public_page_uuid: Option<String>,
    #[serde(rename = "resolvedYourIssue", skip_serializing_if = "Option::is_none")]
    pub resolved_your_issue: Option<bool>,
    #[serde(rename = "responsibleUserId", skip_serializing_if = "Option::is_none")]
    pub responsible_user_id: Option<String>,
    #[serde(rename = "room", skip_serializing_if = "Option::is_none")]
    pub room: Option<String>,
    #[serde(rename = "solutionDueDate", skip_serializing_if = "Option::is_none")]
    pub solution_due_date: Option<i32>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "ticketCategoryId", skip_serializing_if = "Option::is_none")]
    pub ticket_category_id: Option<String>,
    #[serde(rename = "ticketChannelId", skip_serializing_if = "Option::is_none")]
    pub ticket_channel_id: Option<String>,
    #[serde(rename = "ticketNumber", skip_serializing_if = "Option::is_none")]
    pub ticket_number: Option<String>,
    #[serde(rename = "ticketPriorityId")]
    pub ticket_priority_id: String,
    #[serde(rename = "ticketRating", skip_serializing_if = "Option::is_none")]
    pub ticket_rating: Option<TicketRating>,
    #[serde(
        rename = "ticketRatingComment",
        skip_serializing_if = "Option::is_none"
    )]
    pub ticket_rating_comment: Option<String>,
    #[serde(rename = "ticketRatingDate", skip_serializing_if = "Option::is_none")]
    pub ticket_rating_date: Option<i32>,
    #[serde(
        rename = "ticketServiceLevelAgreementId",
        skip_serializing_if = "Option::is_none"
    )]
    pub ticket_service_level_agreement_id: Option<String>,
    #[serde(rename = "ticketStatusId")]
    pub ticket_status_id: String,
    #[serde(rename = "ticketTypeId", skip_serializing_if = "Option::is_none")]
    pub ticket_type_id: Option<String>,
}

impl Ticket {
    pub fn new(ticket_priority_id: String, ticket_status_id: String) -> Ticket {
        Ticket {
            id: None,
            version: None,
            assigned_user_id: None,
            billable: None,
            cc_email_addresses: None,
            contact_id: None,
            contract_id: None,
            created_date: None,
            custom_attributes: None,
            description: None,
            disable_email_templates: None,
            email: None,
            entity_references: None,
            finished_date: None,
            first_name: None,
            follow_up_date: None,
            language: None,
            last_modified_date: None,
            last_name: None,
            legacy_article_id: None,
            legacy_time_and_material_ticket: None,
            mail2_ticket_id: None,
            mobile_phone_number: None,
            note: None,
            party_id: None,
            phone_number: None,
            public_page_expiration_date: None,
            public_page_uuid: None,
            resolved_your_issue: None,
            responsible_user_id: None,
            room: None,
            solution_due_date: None,
            subject: None,
            tags: None,
            ticket_category_id: None,
            ticket_channel_id: None,
            ticket_number: None,
            ticket_priority_id,
            ticket_rating: None,
            ticket_rating_comment: None,
            ticket_rating_date: None,
            ticket_service_level_agreement_id: None,
            ticket_status_id,
            ticket_type_id: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TicketRating {
    #[serde(rename = "STARS_1")]
    Variant1,
    #[serde(rename = "STARS_2")]
    Variant2,
    #[serde(rename = "STARS_3")]
    Variant3,
    #[serde(rename = "STARS_4")]
    Variant4,
    #[serde(rename = "STARS_5")]
    Variant5,
}

impl Default for TicketRating {
    fn default() -> TicketRating {
        Self::Variant1
    }
}
