/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Shipment {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "additionalDeliveryInformation",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_delivery_information: Option<String>,
    #[serde(
        rename = "allWithdrawalsConfirmed",
        skip_serializing_if = "Option::is_none"
    )]
    pub all_withdrawals_confirmed: Option<bool>,
    #[serde(
        rename = "assignedPickingUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_picking_user_id: Option<String>,
    #[serde(
        rename = "assignedPickingUserUpdateDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_picking_user_update_date: Option<i32>,
    #[serde(
        rename = "assignedPickingUserUsername",
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_picking_user_username: Option<String>,
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Availability>,
    #[serde(
        rename = "availabilityForAllWarehouses",
        skip_serializing_if = "Option::is_none"
    )]
    pub availability_for_all_warehouses: Option<AvailabilityForAllWarehouses>,
    #[serde(rename = "commercialLanguage", skip_serializing_if = "Option::is_none")]
    pub commercial_language: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(
        rename = "customerPurchaseOrderNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_purchase_order_number: Option<String>,
    #[serde(
        rename = "declaredValueAmount",
        skip_serializing_if = "Option::is_none"
    )]
    pub declared_value_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(
        rename = "declaredValueAmountCurrencyId",
        skip_serializing_if = "Option::is_none"
    )]
    pub declared_value_amount_currency_id: Option<String>,
    #[serde(
        rename = "declaredValueAmountCurrencyName",
        skip_serializing_if = "Option::is_none"
    )]
    pub declared_value_amount_currency_name: Option<String>,
    #[serde(rename = "deliveryDate", skip_serializing_if = "Option::is_none")]
    pub delivery_date: Option<i32>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "destinationWarehouseId",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_warehouse_id: Option<String>,
    #[serde(
        rename = "destinationWarehouseLevelId",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_warehouse_level_id: Option<String>,
    #[serde(
        rename = "destinationWarehouseName",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_warehouse_name: Option<String>,
    #[serde(
        rename = "disableEmailTemplate",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_email_template: Option<bool>,
    #[serde(rename = "invoiceAddress", skip_serializing_if = "Option::is_none")]
    pub invoice_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "invoiceRecipientId", skip_serializing_if = "Option::is_none")]
    pub invoice_recipient_id: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "packageHeight", skip_serializing_if = "Option::is_none")]
    pub package_height: Option<i32>,
    #[serde(rename = "packageLength", skip_serializing_if = "Option::is_none")]
    pub package_length: Option<i32>,
    #[serde(
        rename = "packageReferenceNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub package_reference_number: Option<String>,
    #[serde(
        rename = "packageReturnTrackingNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub package_return_tracking_number: Option<String>,
    #[serde(
        rename = "packageReturnTrackingUrl",
        skip_serializing_if = "Option::is_none"
    )]
    pub package_return_tracking_url: Option<String>,
    #[serde(
        rename = "packageTrackingNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub package_tracking_number: Option<String>,
    #[serde(rename = "packageTrackingUrl", skip_serializing_if = "Option::is_none")]
    pub package_tracking_url: Option<String>,
    #[serde(rename = "packageWeight", skip_serializing_if = "Option::is_none")]
    pub package_weight: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "packageWidth", skip_serializing_if = "Option::is_none")]
    pub package_width: Option<i32>,
    #[serde(
        rename = "pickingInstructions",
        skip_serializing_if = "Option::is_none"
    )]
    pub picking_instructions: Option<String>,
    #[serde(rename = "purchaseOrders", skip_serializing_if = "Option::is_none")]
    pub purchase_orders: Option<Vec<crate::models::OnlyId>>,
    #[serde(rename = "recipientAddress", skip_serializing_if = "Option::is_none")]
    pub recipient_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(
        rename = "recipientCustomerNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub recipient_customer_number: Option<String>,
    #[serde(rename = "recipientPartyId", skip_serializing_if = "Option::is_none")]
    pub recipient_party_id: Option<String>,
    #[serde(
        rename = "recipientSupplierNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub recipient_supplier_number: Option<String>,
    #[serde(rename = "recordComment", skip_serializing_if = "Option::is_none")]
    pub record_comment: Option<String>,
    #[serde(
        rename = "recordEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub record_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(rename = "recordFreeText", skip_serializing_if = "Option::is_none")]
    pub record_free_text: Option<String>,
    #[serde(rename = "recordOpening", skip_serializing_if = "Option::is_none")]
    pub record_opening: Option<String>,
    #[serde(rename = "responsibleUserId", skip_serializing_if = "Option::is_none")]
    pub responsible_user_id: Option<String>,
    #[serde(
        rename = "salesInvoiceEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub sales_invoice_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(rename = "salesOrderId", skip_serializing_if = "Option::is_none")]
    pub sales_order_id: Option<String>,
    #[serde(rename = "salesOrderNumber", skip_serializing_if = "Option::is_none")]
    pub sales_order_number: Option<String>,
    #[serde(rename = "sentToRecipient", skip_serializing_if = "Option::is_none")]
    pub sent_to_recipient: Option<bool>,
    #[serde(rename = "shipmentItems", skip_serializing_if = "Option::is_none")]
    pub shipment_items: Option<Vec<crate::models::ShipmentItem>>,
    #[serde(rename = "shipmentMethodId", skip_serializing_if = "Option::is_none")]
    pub shipment_method_id: Option<String>,
    #[serde(rename = "shipmentMethodName", skip_serializing_if = "Option::is_none")]
    pub shipment_method_name: Option<String>,
    #[serde(rename = "shipmentNumber", skip_serializing_if = "Option::is_none")]
    pub shipment_number: Option<String>,
    #[serde(rename = "shipmentType", skip_serializing_if = "Option::is_none")]
    pub shipment_type: Option<ShipmentType>,
    #[serde(rename = "shippedFromAddress", skip_serializing_if = "Option::is_none")]
    pub shipped_from_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "shippingCarrierId", skip_serializing_if = "Option::is_none")]
    pub shipping_carrier_id: Option<String>,
    #[serde(
        rename = "shippingCarrierName",
        skip_serializing_if = "Option::is_none"
    )]
    pub shipping_carrier_name: Option<String>,
    #[serde(rename = "shippingDate", skip_serializing_if = "Option::is_none")]
    pub shipping_date: Option<i32>,
    #[serde(
        rename = "shippingLabelsCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub shipping_labels_count: Option<i32>,
    #[serde(
        rename = "shippingReturnCarrierId",
        skip_serializing_if = "Option::is_none"
    )]
    pub shipping_return_carrier_id: Option<String>,
    #[serde(
        rename = "shippingReturnCarrierName",
        skip_serializing_if = "Option::is_none"
    )]
    pub shipping_return_carrier_name: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "statusHistory", skip_serializing_if = "Option::is_none")]
    pub status_history: Option<Vec<crate::models::ShipmentStatus>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "warehouseId", skip_serializing_if = "Option::is_none")]
    pub warehouse_id: Option<String>,
    #[serde(rename = "warehouseName", skip_serializing_if = "Option::is_none")]
    pub warehouse_name: Option<String>,
    #[serde(
        rename = "withdrawalsComplete",
        skip_serializing_if = "Option::is_none"
    )]
    pub withdrawals_complete: Option<bool>,
}

impl Shipment {
    pub fn new(status: Status) -> Shipment {
        Shipment {
            id: None,
            version: None,
            additional_delivery_information: None,
            all_withdrawals_confirmed: None,
            assigned_picking_user_id: None,
            assigned_picking_user_update_date: None,
            assigned_picking_user_username: None,
            availability: None,
            availability_for_all_warehouses: None,
            commercial_language: None,
            created_date: None,
            custom_attributes: None,
            customer_purchase_order_number: None,
            declared_value_amount: None,
            declared_value_amount_currency_id: None,
            declared_value_amount_currency_name: None,
            delivery_date: None,
            description: None,
            destination_warehouse_id: None,
            destination_warehouse_level_id: None,
            destination_warehouse_name: None,
            disable_email_template: None,
            invoice_address: None,
            invoice_recipient_id: None,
            last_modified_date: None,
            package_height: None,
            package_length: None,
            package_reference_number: None,
            package_return_tracking_number: None,
            package_return_tracking_url: None,
            package_tracking_number: None,
            package_tracking_url: None,
            package_weight: None,
            package_width: None,
            picking_instructions: None,
            purchase_orders: None,
            recipient_address: None,
            recipient_customer_number: None,
            recipient_party_id: None,
            recipient_supplier_number: None,
            record_comment: None,
            record_email_addresses: None,
            record_free_text: None,
            record_opening: None,
            responsible_user_id: None,
            sales_invoice_email_addresses: None,
            sales_order_id: None,
            sales_order_number: None,
            sent_to_recipient: None,
            shipment_items: None,
            shipment_method_id: None,
            shipment_method_name: None,
            shipment_number: None,
            shipment_type: None,
            shipped_from_address: None,
            shipping_carrier_id: None,
            shipping_carrier_name: None,
            shipping_date: None,
            shipping_labels_count: None,
            shipping_return_carrier_id: None,
            shipping_return_carrier_name: None,
            status,
            status_history: None,
            tags: None,
            warehouse_id: None,
            warehouse_name: None,
            withdrawals_complete: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Availability {
    #[serde(rename = "COMPLETELY_AVAILABLE")]
    CompletelyAvailable,
    #[serde(rename = "NOTHING_AVAILABLE")]
    NothingAvailable,
    #[serde(rename = "NOT_CHECKED")]
    NotChecked,
    #[serde(rename = "PARTIALLY_AVAILABLE")]
    PartiallyAvailable,
}

impl Default for Availability {
    fn default() -> Availability {
        Self::CompletelyAvailable
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AvailabilityForAllWarehouses {
    #[serde(rename = "COMPLETELY_AVAILABLE")]
    CompletelyAvailable,
    #[serde(rename = "NOTHING_AVAILABLE")]
    NothingAvailable,
    #[serde(rename = "NOT_CHECKED")]
    NotChecked,
    #[serde(rename = "PARTIALLY_AVAILABLE")]
    PartiallyAvailable,
}

impl Default for AvailabilityForAllWarehouses {
    fn default() -> AvailabilityForAllWarehouses {
        Self::CompletelyAvailable
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShipmentType {
    #[serde(rename = "CONSIGNMENT")]
    Consignment,
    #[serde(rename = "CONSIGNMENT_RETURN")]
    ConsignmentReturn,
    #[serde(rename = "CUSTOMER_COMPENSATION")]
    CustomerCompensation,
    #[serde(rename = "INTERNAL")]
    Internal,
    #[serde(rename = "STANDARD")]
    Standard,
    #[serde(rename = "SUPPLIER_RETURN")]
    SupplierReturn,
}

impl Default for ShipmentType {
    fn default() -> ShipmentType {
        Self::Consignment
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "DELIVERED")]
    Delivered,
    #[serde(rename = "DELIVERY_NOTE_PRINTED")]
    DeliveryNotePrinted,
    #[serde(rename = "INCOMING_CANCELLED")]
    IncomingCancelled,
    #[serde(rename = "INCOMING_GOODS_MOVEMENT_PRINTED")]
    IncomingGoodsMovementPrinted,
    #[serde(rename = "INCOMING_MOVED_INTO_STORE")]
    IncomingMovedIntoStore,
    #[serde(rename = "INCOMING_SHIPPED")]
    IncomingShipped,
    #[serde(rename = "IN_ROUTE")]
    InRoute,
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "SHIPPED")]
    Shipped,
}

impl Default for Status {
    fn default() -> Status {
        Self::Cancelled
    }
}
