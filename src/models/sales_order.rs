/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SalesOrder {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "advancePaymentStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub advance_payment_status: Option<AdvancePaymentStatus>,
    #[serde(rename = "availability", skip_serializing_if = "Option::is_none")]
    pub availability: Option<Availability>,
    #[serde(
        rename = "availabilityForAllWarehouses",
        skip_serializing_if = "Option::is_none"
    )]
    pub availability_for_all_warehouses: Option<AvailabilityForAllWarehouses>,
    #[serde(rename = "cashAccountId", skip_serializing_if = "Option::is_none")]
    pub cash_account_id: Option<String>,
    #[serde(rename = "commercialLanguage", skip_serializing_if = "Option::is_none")]
    pub commercial_language: Option<String>,
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    #[serde(
        rename = "commissionSalesPartners",
        skip_serializing_if = "Option::is_none"
    )]
    pub commission_sales_partners: Option<Vec<crate::models::CommissionSalesPartner>>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(
        rename = "currencyConversionDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub currency_conversion_date: Option<i32>,
    #[serde(
        rename = "currencyConversionRate",
        skip_serializing_if = "Option::is_none"
    )]
    pub currency_conversion_rate: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(
        rename = "customerHabitualExporterLetterOfIntentId",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_habitual_exporter_letter_of_intent_id: Option<String>,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "customerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
    #[serde(
        rename = "defaultShippingCarrierId",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_shipping_carrier_id: Option<String>,
    #[serde(
        rename = "defaultShippingCarrierName",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_shipping_carrier_name: Option<String>,
    #[serde(
        rename = "defaultShippingReturnCarrierId",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_shipping_return_carrier_id: Option<String>,
    #[serde(
        rename = "defaultShippingReturnCarrierName",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_shipping_return_carrier_name: Option<String>,
    #[serde(rename = "deliveryAddress", skip_serializing_if = "Option::is_none")]
    pub delivery_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(
        rename = "deliveryEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "disableEmailTemplate",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_email_template: Option<bool>,
    #[serde(
        rename = "dispatchCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub dispatch_country_code: Option<String>,
    #[serde(rename = "ecommerceOrder", skip_serializing_if = "Option::is_none")]
    pub ecommerce_order: Option<Box<crate::models::EcommerceOrder>>,
    #[serde(rename = "factoring", skip_serializing_if = "Option::is_none")]
    pub factoring: Option<bool>,
    #[serde(
        rename = "fulfillmentProviderId",
        skip_serializing_if = "Option::is_none"
    )]
    pub fulfillment_provider_id: Option<String>,
    #[serde(rename = "grossAmount", skip_serializing_if = "Option::is_none")]
    pub gross_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(
        rename = "grossAmountInCompanyCurrency",
        skip_serializing_if = "Option::is_none"
    )]
    pub gross_amount_in_company_currency:
        Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "headerDiscount", skip_serializing_if = "Option::is_none")]
    pub header_discount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "headerSurcharge", skip_serializing_if = "Option::is_none")]
    pub header_surcharge: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "invoiceAddress", skip_serializing_if = "Option::is_none")]
    pub invoice_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "invoiceRecipientId", skip_serializing_if = "Option::is_none")]
    pub invoice_recipient_id: Option<String>,
    #[serde(rename = "invoiced", skip_serializing_if = "Option::is_none")]
    pub invoiced: Option<bool>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "netAmount", skip_serializing_if = "Option::is_none")]
    pub net_amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(
        rename = "netAmountInCompanyCurrency",
        skip_serializing_if = "Option::is_none"
    )]
    pub net_amount_in_company_currency:
        Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "nonStandardTaxId", skip_serializing_if = "Option::is_none")]
    pub non_standard_tax_id: Option<String>,
    #[serde(rename = "nonStandardTaxName", skip_serializing_if = "Option::is_none")]
    pub non_standard_tax_name: Option<String>,
    #[serde(rename = "onlyServices", skip_serializing_if = "Option::is_none")]
    pub only_services: Option<bool>,
    #[serde(rename = "orderDate", skip_serializing_if = "Option::is_none")]
    pub order_date: Option<i32>,
    #[serde(rename = "orderItems", skip_serializing_if = "Option::is_none")]
    pub order_items: Option<Vec<crate::models::SalesOrderItem>>,
    #[serde(rename = "orderNumber", skip_serializing_if = "Option::is_none")]
    pub order_number: Option<String>,
    #[serde(
        rename = "orderNumberAtCustomer",
        skip_serializing_if = "Option::is_none"
    )]
    pub order_number_at_customer: Option<String>,
    #[serde(rename = "paid", skip_serializing_if = "Option::is_none")]
    pub paid: Option<bool>,
    #[serde(rename = "paymentMethodId", skip_serializing_if = "Option::is_none")]
    pub payment_method_id: Option<String>,
    #[serde(rename = "paymentMethodName", skip_serializing_if = "Option::is_none")]
    pub payment_method_name: Option<String>,
    #[serde(
        rename = "plannedDeliveryDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub planned_delivery_date: Option<i32>,
    #[serde(
        rename = "plannedProjectEndDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub planned_project_end_date: Option<i32>,
    #[serde(
        rename = "plannedProjectStartDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub planned_project_start_date: Option<i32>,
    #[serde(
        rename = "plannedShippingDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub planned_shipping_date: Option<i32>,
    #[serde(rename = "pricingDate", skip_serializing_if = "Option::is_none")]
    pub pricing_date: Option<i32>,
    #[serde(rename = "projectGoals", skip_serializing_if = "Option::is_none")]
    pub project_goals: Option<String>,
    #[serde(rename = "projectMembers", skip_serializing_if = "Option::is_none")]
    pub project_members: Option<Vec<crate::models::ProjectMembers>>,
    #[serde(rename = "projectModeActive", skip_serializing_if = "Option::is_none")]
    pub project_mode_active: Option<bool>,
    #[serde(rename = "quotationId", skip_serializing_if = "Option::is_none")]
    pub quotation_id: Option<String>,
    #[serde(rename = "quotationNumber", skip_serializing_if = "Option::is_none")]
    pub quotation_number: Option<String>,
    #[serde(rename = "recordAddress", skip_serializing_if = "Option::is_none")]
    pub record_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "recordComment", skip_serializing_if = "Option::is_none")]
    pub record_comment: Option<String>,
    #[serde(rename = "recordCurrencyId", skip_serializing_if = "Option::is_none")]
    pub record_currency_id: Option<String>,
    #[serde(rename = "recordCurrencyName", skip_serializing_if = "Option::is_none")]
    pub record_currency_name: Option<String>,
    #[serde(
        rename = "recordEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub record_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(rename = "recordFreeText", skip_serializing_if = "Option::is_none")]
    pub record_free_text: Option<String>,
    #[serde(rename = "recordOpening", skip_serializing_if = "Option::is_none")]
    pub record_opening: Option<String>,
    #[serde(rename = "responsibleUserId", skip_serializing_if = "Option::is_none")]
    pub responsible_user_id: Option<String>,
    #[serde(
        rename = "responsibleUserUsername",
        skip_serializing_if = "Option::is_none"
    )]
    pub responsible_user_username: Option<String>,
    #[serde(rename = "salesChannel", skip_serializing_if = "Option::is_none")]
    pub sales_channel: Option<String>,
    #[serde(
        rename = "salesInvoiceEmailAddresses",
        skip_serializing_if = "Option::is_none"
    )]
    pub sales_invoice_email_addresses: Option<Box<crate::models::EmailAddresses>>,
    #[serde(
        rename = "salesOrderPaymentType",
        skip_serializing_if = "Option::is_none"
    )]
    pub sales_order_payment_type: Option<SalesOrderPaymentType>,
    #[serde(rename = "sentToRecipient", skip_serializing_if = "Option::is_none")]
    pub sent_to_recipient: Option<bool>,
    #[serde(rename = "servicePeriodFrom", skip_serializing_if = "Option::is_none")]
    pub service_period_from: Option<i32>,
    #[serde(rename = "servicePeriodTo", skip_serializing_if = "Option::is_none")]
    pub service_period_to: Option<i32>,
    #[serde(rename = "servicesFinished", skip_serializing_if = "Option::is_none")]
    pub services_finished: Option<bool>,
    #[serde(rename = "shipmentMethodId", skip_serializing_if = "Option::is_none")]
    pub shipment_method_id: Option<String>,
    #[serde(rename = "shipmentMethodName", skip_serializing_if = "Option::is_none")]
    pub shipment_method_name: Option<String>,
    #[serde(rename = "shipped", skip_serializing_if = "Option::is_none")]
    pub shipped: Option<bool>,
    #[serde(rename = "shippingCostItems", skip_serializing_if = "Option::is_none")]
    pub shipping_cost_items: Option<Vec<crate::models::SalesShippingCostItem>>,
    #[serde(
        rename = "shippingLabelsCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub shipping_labels_count: Option<i32>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "statusHistory", skip_serializing_if = "Option::is_none")]
    pub status_history: Option<Vec<crate::models::SalesOrderStatusHistory>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "termOfPaymentId", skip_serializing_if = "Option::is_none")]
    pub term_of_payment_id: Option<String>,
    #[serde(rename = "termOfPaymentName", skip_serializing_if = "Option::is_none")]
    pub term_of_payment_name: Option<String>,
    #[serde(rename = "warehouseId", skip_serializing_if = "Option::is_none")]
    pub warehouse_id: Option<String>,
    #[serde(rename = "warehouseName", skip_serializing_if = "Option::is_none")]
    pub warehouse_name: Option<String>,
}

impl SalesOrder {
    pub fn new(customer_id: String, status: Status) -> SalesOrder {
        SalesOrder {
            id: None,
            version: None,
            advance_payment_status: None,
            availability: None,
            availability_for_all_warehouses: None,
            cash_account_id: None,
            commercial_language: None,
            commission: None,
            commission_sales_partners: None,
            created_date: None,
            currency_conversion_date: None,
            currency_conversion_rate: None,
            custom_attributes: None,
            customer_habitual_exporter_letter_of_intent_id: None,
            customer_id,
            customer_number: None,
            default_shipping_carrier_id: None,
            default_shipping_carrier_name: None,
            default_shipping_return_carrier_id: None,
            default_shipping_return_carrier_name: None,
            delivery_address: None,
            delivery_email_addresses: None,
            description: None,
            disable_email_template: None,
            dispatch_country_code: None,
            ecommerce_order: None,
            factoring: None,
            fulfillment_provider_id: None,
            gross_amount: None,
            gross_amount_in_company_currency: None,
            header_discount: None,
            header_surcharge: None,
            invoice_address: None,
            invoice_recipient_id: None,
            invoiced: None,
            last_modified_date: None,
            net_amount: None,
            net_amount_in_company_currency: None,
            non_standard_tax_id: None,
            non_standard_tax_name: None,
            only_services: None,
            order_date: None,
            order_items: None,
            order_number: None,
            order_number_at_customer: None,
            paid: None,
            payment_method_id: None,
            payment_method_name: None,
            planned_delivery_date: None,
            planned_project_end_date: None,
            planned_project_start_date: None,
            planned_shipping_date: None,
            pricing_date: None,
            project_goals: None,
            project_members: None,
            project_mode_active: None,
            quotation_id: None,
            quotation_number: None,
            record_address: None,
            record_comment: None,
            record_currency_id: None,
            record_currency_name: None,
            record_email_addresses: None,
            record_free_text: None,
            record_opening: None,
            responsible_user_id: None,
            responsible_user_username: None,
            sales_channel: None,
            sales_invoice_email_addresses: None,
            sales_order_payment_type: None,
            sent_to_recipient: None,
            service_period_from: None,
            service_period_to: None,
            services_finished: None,
            shipment_method_id: None,
            shipment_method_name: None,
            shipped: None,
            shipping_cost_items: None,
            shipping_labels_count: None,
            status,
            status_history: None,
            tags: None,
            term_of_payment_id: None,
            term_of_payment_name: None,
            warehouse_id: None,
            warehouse_name: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdvancePaymentStatus {
    #[serde(rename = "OPEN")]
    Open,
    #[serde(rename = "PAID")]
    Paid,
}

impl Default for AdvancePaymentStatus {
    fn default() -> AdvancePaymentStatus {
        Self::Open
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Availability {
    #[serde(rename = "COMPLETELY_AVAILABLE")]
    CompletelyAvailable,
    #[serde(rename = "NOTHING_AVAILABLE")]
    NothingAvailable,
    #[serde(rename = "NOT_CHECKED")]
    NotChecked,
    #[serde(rename = "PARTIALLY_AVAILABLE")]
    PartiallyAvailable,
}

impl Default for Availability {
    fn default() -> Availability {
        Self::CompletelyAvailable
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AvailabilityForAllWarehouses {
    #[serde(rename = "COMPLETELY_AVAILABLE")]
    CompletelyAvailable,
    #[serde(rename = "NOTHING_AVAILABLE")]
    NothingAvailable,
    #[serde(rename = "NOT_CHECKED")]
    NotChecked,
    #[serde(rename = "PARTIALLY_AVAILABLE")]
    PartiallyAvailable,
}

impl Default for AvailabilityForAllWarehouses {
    fn default() -> AvailabilityForAllWarehouses {
        Self::CompletelyAvailable
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SalesOrderPaymentType {
    #[serde(rename = "ADVANCE_PAYMENT")]
    AdvancePayment,
    #[serde(rename = "COUNTER_SALES")]
    CounterSales,
    #[serde(rename = "PART_PAYMENT")]
    PartPayment,
    #[serde(rename = "PREPAYMENT")]
    Prepayment,
    #[serde(rename = "STANDARD")]
    Standard,
}

impl Default for SalesOrderPaymentType {
    fn default() -> SalesOrderPaymentType {
        Self::AdvancePayment
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "CLOSED")]
    Closed,
    #[serde(rename = "MANUALLY_CLOSED")]
    ManuallyClosed,
    #[serde(rename = "ORDER_CONFIRMATION_PRINTED")]
    OrderConfirmationPrinted,
    #[serde(rename = "ORDER_ENTRY_IN_PROGRESS")]
    OrderEntryInProgress,
}

impl Default for Status {
    fn default() -> Status {
        Self::Cancelled
    }
}
