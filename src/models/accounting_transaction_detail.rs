/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccountingTransactionDetail {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<crate::models::custom_attribute_definition::AttributeType>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "currencyId", skip_serializing_if = "Option::is_none")]
    pub currency_id: Option<String>,
    #[serde(rename = "currencyName", skip_serializing_if = "Option::is_none")]
    pub currency_name: Option<String>,
    #[serde(rename = "debitCredit", skip_serializing_if = "Option::is_none")]
    pub debit_credit: Option<DebitCredit>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "taxId", skip_serializing_if = "Option::is_none")]
    pub tax_id: Option<String>,
    #[serde(rename = "taxName", skip_serializing_if = "Option::is_none")]
    pub tax_name: Option<String>,
    #[serde(
        rename = "transactionDetailType",
        skip_serializing_if = "Option::is_none"
    )]
    pub transaction_detail_type: Option<TransactionDetailType>,
}

impl AccountingTransactionDetail {
    pub fn new() -> AccountingTransactionDetail {
        AccountingTransactionDetail {
            id: None,
            version: None,
            account_id: None,
            account_number: None,
            amount: None,
            created_date: None,
            currency_id: None,
            currency_name: None,
            debit_credit: None,
            description: None,
            last_modified_date: None,
            tax_id: None,
            tax_name: None,
            transaction_detail_type: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DebitCredit {
    #[serde(rename = "CREDIT")]
    Credit,
    #[serde(rename = "DEBIT")]
    Debit,
}

impl Default for DebitCredit {
    fn default() -> DebitCredit {
        Self::Credit
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionDetailType {
    #[serde(rename = "DEFAULT")]
    Default,
    #[serde(rename = "DISCOUNT")]
    Discount,
    #[serde(rename = "DUNNING_FEE")]
    DunningFee,
    #[serde(rename = "IMPORT_SALES_TAX")]
    ImportSalesTax,
    #[serde(rename = "MONETARY_TRAFFIC")]
    MonetaryTraffic,
    #[serde(rename = "PAYMENT_TOLERANCE")]
    PaymentTolerance,
    #[serde(rename = "REVERSE_CHARGE_TAX")]
    ReverseChargeTax,
    #[serde(rename = "REVERSE_CHARGE_TAX_CONTRA")]
    ReverseChargeTaxContra,
    #[serde(rename = "TAX")]
    Tax,
    #[serde(rename = "TAXATION_ON_PAYMENT")]
    TaxationOnPayment,
    #[serde(rename = "TAXATION_ON_PAYMENT_CONTRA")]
    TaxationOnPaymentContra,
}

impl Default for TransactionDetailType {
    fn default() -> TransactionDetailType {
        Self::Default
    }
}
