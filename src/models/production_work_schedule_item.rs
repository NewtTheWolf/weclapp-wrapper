/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProductionWorkScheduleItem {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "costCenterId", skip_serializing_if = "Option::is_none")]
    pub cost_center_id: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "multipleHumanOperation")]
    pub multiple_human_operation: i32,
    #[serde(rename = "multipleMachineOperation")]
    pub multiple_machine_operation: i32,
    #[serde(rename = "positionNumber", skip_serializing_if = "Option::is_none")]
    pub position_number: Option<i32>,
    #[serde(
        rename = "productionWorkScheduleId",
        skip_serializing_if = "Option::is_none"
    )]
    pub production_work_schedule_id: Option<String>,
    #[serde(rename = "quantityBase", skip_serializing_if = "Option::is_none")]
    pub quantity_base: Option<i32>,
    #[serde(rename = "setupTime")]
    pub setup_time: crate::models::custom_attribute_definition::AttributeType,
    #[serde(rename = "shortDescription", skip_serializing_if = "Option::is_none")]
    pub short_description: Option<String>,
    #[serde(rename = "timeType")]
    pub time_type: TimeType,
    #[serde(rename = "timeUnit")]
    pub time_unit: TimeUnit,
    #[serde(rename = "unitTime")]
    pub unit_time: crate::models::custom_attribute_definition::AttributeType,
    #[serde(rename = "validFrom", skip_serializing_if = "Option::is_none")]
    pub valid_from: Option<i32>,
    #[serde(rename = "validTo", skip_serializing_if = "Option::is_none")]
    pub valid_to: Option<i32>,
}

impl ProductionWorkScheduleItem {
    pub fn new(
        multiple_human_operation: i32,
        multiple_machine_operation: i32,
        setup_time: crate::models::custom_attribute_definition::AttributeType,
        time_type: TimeType,
        time_unit: TimeUnit,
        unit_time: crate::models::custom_attribute_definition::AttributeType,
    ) -> ProductionWorkScheduleItem {
        ProductionWorkScheduleItem {
            id: None,
            version: None,
            cost_center_id: None,
            created_date: None,
            custom_attributes: None,
            description: None,
            last_modified_date: None,
            multiple_human_operation,
            multiple_machine_operation,
            position_number: None,
            production_work_schedule_id: None,
            quantity_base: None,
            setup_time,
            short_description: None,
            time_type,
            time_unit,
            unit_time,
            valid_from: None,
            valid_to: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeType {
    #[serde(rename = "SINGLE_TIME")]
    SingleTime,
    #[serde(rename = "TIME_PER_UNIT")]
    TimePerUnit,
}

impl Default for TimeType {
    fn default() -> TimeType {
        Self::SingleTime
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeUnit {
    #[serde(rename = "DAY")]
    Day,
    #[serde(rename = "HOUR")]
    Hour,
    #[serde(rename = "MINUTE")]
    Minute,
    #[serde(rename = "MONTH")]
    Month,
    #[serde(rename = "SECOND")]
    Second,
    #[serde(rename = "WEEK")]
    Week,
    #[serde(rename = "YEAR")]
    Year,
}

impl Default for TimeUnit {
    fn default() -> TimeUnit {
        Self::Day
    }
}
