/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecurringEvent {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "endsOn", skip_serializing_if = "Option::is_none")]
    pub ends_on: Option<i32>,
    #[serde(rename = "eventInterval", skip_serializing_if = "Option::is_none")]
    pub event_interval: Option<i32>,
    #[serde(
        rename = "eventOccurrenceCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_occurrence_count: Option<i32>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<EventType>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "repeatOn", skip_serializing_if = "Option::is_none")]
    pub repeat_on: Option<String>,
}

impl RecurringEvent {
    pub fn new() -> RecurringEvent {
        RecurringEvent {
            id: None,
            version: None,
            created_date: None,
            ends_on: None,
            event_interval: None,
            event_occurrence_count: None,
            event_type: None,
            last_modified_date: None,
            repeat_on: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "DAILY")]
    Daily,
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "WEEKLY")]
    Weekly,
    #[serde(rename = "YEARLY")]
    Yearly,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::Daily
    }
}
