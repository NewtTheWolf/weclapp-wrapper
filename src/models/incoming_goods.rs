/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IncomingGoods {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "commercialLanguage", skip_serializing_if = "Option::is_none")]
    pub commercial_language: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(
        rename = "customerDeliveryAddress",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_delivery_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(
        rename = "customerInvoiceAddress",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_invoice_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "deliveryNoteNumber", skip_serializing_if = "Option::is_none")]
    pub delivery_note_number: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "disableEmailTemplate",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_email_template: Option<bool>,
    #[serde(rename = "incomingGoodsItems", skip_serializing_if = "Option::is_none")]
    pub incoming_goods_items: Option<Vec<crate::models::IncomingGoodsItem>>,
    #[serde(
        rename = "incomingGoodsNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub incoming_goods_number: Option<String>,
    #[serde(rename = "incomingGoodsType", skip_serializing_if = "Option::is_none")]
    pub incoming_goods_type: Option<IncomingGoodsType>,
    #[serde(rename = "invoiceAddress", skip_serializing_if = "Option::is_none")]
    pub invoice_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "invoiceRecipientId", skip_serializing_if = "Option::is_none")]
    pub invoice_recipient_id: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "purchaseOrderId", skip_serializing_if = "Option::is_none")]
    pub purchase_order_id: Option<String>,
    #[serde(
        rename = "purchaseOrderNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub purchase_order_number: Option<String>,
    #[serde(rename = "purchaseOrders", skip_serializing_if = "Option::is_none")]
    pub purchase_orders: Option<Vec<crate::models::OnlyId>>,
    #[serde(rename = "recipientAddress", skip_serializing_if = "Option::is_none")]
    pub recipient_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "recordComment", skip_serializing_if = "Option::is_none")]
    pub record_comment: Option<String>,
    #[serde(rename = "recordFreeText", skip_serializing_if = "Option::is_none")]
    pub record_free_text: Option<String>,
    #[serde(rename = "recordOpening", skip_serializing_if = "Option::is_none")]
    pub record_opening: Option<String>,
    #[serde(rename = "relatedShipmentId", skip_serializing_if = "Option::is_none")]
    pub related_shipment_id: Option<String>,
    #[serde(rename = "responsibleUserId", skip_serializing_if = "Option::is_none")]
    pub responsible_user_id: Option<String>,
    #[serde(rename = "returnAddress", skip_serializing_if = "Option::is_none")]
    pub return_address: Option<Box<crate::models::RecordAddress>>,
    #[serde(rename = "salesOrderId", skip_serializing_if = "Option::is_none")]
    pub sales_order_id: Option<String>,
    #[serde(rename = "salesOrderNumber", skip_serializing_if = "Option::is_none")]
    pub sales_order_number: Option<String>,
    #[serde(
        rename = "senderCustomerNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub sender_customer_number: Option<String>,
    #[serde(rename = "senderPartyId", skip_serializing_if = "Option::is_none")]
    pub sender_party_id: Option<String>,
    #[serde(
        rename = "senderSupplierNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub sender_supplier_number: Option<String>,
    #[serde(rename = "sentToRecipient", skip_serializing_if = "Option::is_none")]
    pub sent_to_recipient: Option<bool>,
    #[serde(rename = "sourceWarehouseId", skip_serializing_if = "Option::is_none")]
    pub source_warehouse_id: Option<String>,
    #[serde(
        rename = "sourceWarehouseName",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_warehouse_name: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "statusHistory", skip_serializing_if = "Option::is_none")]
    pub status_history: Option<Vec<crate::models::ShipmentStatus>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "warehouseId", skip_serializing_if = "Option::is_none")]
    pub warehouse_id: Option<String>,
    #[serde(rename = "warehouseName", skip_serializing_if = "Option::is_none")]
    pub warehouse_name: Option<String>,
}

impl IncomingGoods {
    pub fn new(status: Status) -> IncomingGoods {
        IncomingGoods {
            id: None,
            version: None,
            commercial_language: None,
            created_date: None,
            custom_attributes: None,
            customer_delivery_address: None,
            customer_invoice_address: None,
            delivery_note_number: None,
            description: None,
            disable_email_template: None,
            incoming_goods_items: None,
            incoming_goods_number: None,
            incoming_goods_type: None,
            invoice_address: None,
            invoice_recipient_id: None,
            last_modified_date: None,
            purchase_order_id: None,
            purchase_order_number: None,
            purchase_orders: None,
            recipient_address: None,
            record_comment: None,
            record_free_text: None,
            record_opening: None,
            related_shipment_id: None,
            responsible_user_id: None,
            return_address: None,
            sales_order_id: None,
            sales_order_number: None,
            sender_customer_number: None,
            sender_party_id: None,
            sender_supplier_number: None,
            sent_to_recipient: None,
            source_warehouse_id: None,
            source_warehouse_name: None,
            status,
            status_history: None,
            tags: None,
            warehouse_id: None,
            warehouse_name: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IncomingGoodsType {
    #[serde(rename = "CUSTOMER_RETURN")]
    CustomerReturn,
    #[serde(rename = "INTERNAL")]
    Internal,
    #[serde(rename = "STANDARD")]
    Standard,
    #[serde(rename = "SUPPLIER_COMPENSATION")]
    SupplierCompensation,
}

impl Default for IncomingGoodsType {
    fn default() -> IncomingGoodsType {
        Self::CustomerReturn
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "DELIVERED")]
    Delivered,
    #[serde(rename = "DELIVERY_NOTE_PRINTED")]
    DeliveryNotePrinted,
    #[serde(rename = "INCOMING_CANCELLED")]
    IncomingCancelled,
    #[serde(rename = "INCOMING_GOODS_MOVEMENT_PRINTED")]
    IncomingGoodsMovementPrinted,
    #[serde(rename = "INCOMING_MOVED_INTO_STORE")]
    IncomingMovedIntoStore,
    #[serde(rename = "INCOMING_SHIPPED")]
    IncomingShipped,
    #[serde(rename = "IN_ROUTE")]
    InRoute,
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "SHIPPED")]
    Shipped,
}

impl Default for Status {
    fn default() -> Status {
        Self::Cancelled
    }
}
