/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CalendarEvent {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "allDayEvent", skip_serializing_if = "Option::is_none")]
    pub all_day_event: Option<bool>,
    #[serde(rename = "attendees", skip_serializing_if = "Option::is_none")]
    pub attendees: Option<Vec<crate::models::CalendarEventAttendee>>,
    #[serde(rename = "calendarId")]
    pub calendar_id: String,
    #[serde(rename = "concerningId", skip_serializing_if = "Option::is_none")]
    pub concerning_id: Option<String>,
    #[serde(rename = "contactId", skip_serializing_if = "Option::is_none")]
    pub contact_id: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "endDate")]
    pub end_date: i32,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "privateEvent", skip_serializing_if = "Option::is_none")]
    pub private_event: Option<bool>,
    #[serde(rename = "recurringEvent", skip_serializing_if = "Option::is_none")]
    pub recurring_event: Option<Box<crate::models::RecurringEvent>>,
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<crate::models::EntityReference>>,
    #[serde(rename = "reminderSendType", skip_serializing_if = "Option::is_none")]
    pub reminder_send_type: Option<ReminderSendType>,
    #[serde(rename = "reminderTime", skip_serializing_if = "Option::is_none")]
    pub reminder_time: Option<i32>,
    #[serde(rename = "showAs", skip_serializing_if = "Option::is_none")]
    pub show_as: Option<ShowAs>,
    #[serde(rename = "startDate")]
    pub start_date: i32,
    #[serde(rename = "subject")]
    pub subject: String,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

impl CalendarEvent {
    pub fn new(
        calendar_id: String,
        end_date: i32,
        start_date: i32,
        subject: String,
    ) -> CalendarEvent {
        CalendarEvent {
            id: None,
            version: None,
            all_day_event: None,
            attendees: None,
            calendar_id,
            concerning_id: None,
            contact_id: None,
            created_date: None,
            deleted: None,
            description: None,
            end_date,
            last_modified_date: None,
            location: None,
            private_event: None,
            recurring_event: None,
            references: None,
            reminder_send_type: None,
            reminder_time: None,
            show_as: None,
            start_date,
            subject,
            user_id: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReminderSendType {
    #[serde(rename = "MAIL")]
    Mail,
    #[serde(rename = "NOTIFICATION")]
    Notification,
}

impl Default for ReminderSendType {
    fn default() -> ReminderSendType {
        Self::Mail
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShowAs {
    #[serde(rename = "BUSY")]
    Busy,
    #[serde(rename = "FREE")]
    Free,
    #[serde(rename = "OUT_OF_OFFICE")]
    OutOfOffice,
    #[serde(rename = "TENTATIVE")]
    Tentative,
}

impl Default for ShowAs {
    fn default() -> ShowAs {
        Self::Busy
    }
}
