/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Comment {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "authorName", skip_serializing_if = "Option::is_none")]
    pub author_name: Option<String>,
    #[serde(rename = "authorUserId", skip_serializing_if = "Option::is_none")]
    pub author_user_id: Option<String>,
    #[serde(rename = "authorUserUsername", skip_serializing_if = "Option::is_none")]
    pub author_user_username: Option<String>,
    #[serde(rename = "comment")]
    pub comment: String,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    #[serde(rename = "entityName", skip_serializing_if = "Option::is_none")]
    pub entity_name: Option<String>,
    #[serde(rename = "htmlComment", skip_serializing_if = "Option::is_none")]
    pub html_comment: Option<String>,
    #[serde(rename = "lastEditDate", skip_serializing_if = "Option::is_none")]
    pub last_edit_date: Option<i32>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "parentCommentId", skip_serializing_if = "Option::is_none")]
    pub parent_comment_id: Option<String>,
    #[serde(rename = "privateComment", skip_serializing_if = "Option::is_none")]
    pub private_comment: Option<bool>,
    #[serde(rename = "publicComment", skip_serializing_if = "Option::is_none")]
    pub public_comment: Option<bool>,
    #[serde(rename = "recipientUsers", skip_serializing_if = "Option::is_none")]
    pub recipient_users: Option<Vec<crate::models::OnlyId>>,
    #[serde(rename = "solution", skip_serializing_if = "Option::is_none")]
    pub solution: Option<bool>,
}

impl Comment {
    pub fn new(comment: String) -> Comment {
        Comment {
            id: None,
            version: None,
            author_name: None,
            author_user_id: None,
            author_user_username: None,
            comment,
            created_date: None,
            entity_id: None,
            entity_name: None,
            html_comment: None,
            last_edit_date: None,
            last_modified_date: None,
            parent_comment_id: None,
            private_comment: None,
            public_comment: None,
            recipient_users: None,
            solution: None,
        }
    }
}
