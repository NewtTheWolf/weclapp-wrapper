/*
 * weclapp api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@weclapp.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WarehouseStockMovement {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "articleId")]
    pub article_id: String,
    #[serde(rename = "batchNumber", skip_serializing_if = "Option::is_none")]
    pub batch_number: Option<String>,
    #[serde(rename = "batchNumberId", skip_serializing_if = "Option::is_none")]
    pub batch_number_id: Option<String>,
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<i32>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttribute>>,
    #[serde(
        rename = "incomingGoodsItemId",
        skip_serializing_if = "Option::is_none"
    )]
    pub incoming_goods_item_id: Option<String>,
    #[serde(rename = "lastModifiedDate", skip_serializing_if = "Option::is_none")]
    pub last_modified_date: Option<i32>,
    #[serde(rename = "movementNote", skip_serializing_if = "Option::is_none")]
    pub movement_note: Option<String>,
    #[serde(rename = "movementNumber")]
    pub movement_number: String,
    #[serde(rename = "postingDate")]
    pub posting_date: i32,
    #[serde(rename = "productionOrderId", skip_serializing_if = "Option::is_none")]
    pub production_order_id: Option<String>,
    #[serde(rename = "quantity")]
    pub quantity: crate::models::custom_attribute_definition::AttributeType,
    #[serde(rename = "salesOrderItemId", skip_serializing_if = "Option::is_none")]
    pub sales_order_item_id: Option<String>,
    #[serde(rename = "serialNumber", skip_serializing_if = "Option::is_none")]
    pub serial_number: Option<String>,
    #[serde(rename = "serialNumberId", skip_serializing_if = "Option::is_none")]
    pub serial_number_id: Option<String>,
    #[serde(rename = "shipmentItemId", skip_serializing_if = "Option::is_none")]
    pub shipment_item_id: Option<String>,
    #[serde(rename = "stockMovementType", skip_serializing_if = "Option::is_none")]
    pub stock_movement_type: Option<StockMovementType>,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "valuationPrice")]
    pub valuation_price: crate::models::custom_attribute_definition::AttributeType,
    #[serde(rename = "warehouseLevelId", skip_serializing_if = "Option::is_none")]
    pub warehouse_level_id: Option<String>,
}

impl WarehouseStockMovement {
    pub fn new(
        article_id: String,
        movement_number: String,
        posting_date: i32,
        quantity: crate::models::custom_attribute_definition::AttributeType,
        valuation_price: crate::models::custom_attribute_definition::AttributeType,
    ) -> WarehouseStockMovement {
        WarehouseStockMovement {
            id: None,
            version: None,
            article_id,
            batch_number: None,
            batch_number_id: None,
            created_date: None,
            custom_attributes: None,
            incoming_goods_item_id: None,
            last_modified_date: None,
            movement_note: None,
            movement_number,
            posting_date,
            production_order_id: None,
            quantity,
            sales_order_item_id: None,
            serial_number: None,
            serial_number_id: None,
            shipment_item_id: None,
            stock_movement_type: None,
            user_id: None,
            valuation_price,
            warehouse_level_id: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StockMovementType {
    #[serde(rename = "IN")]
    In,
    #[serde(rename = "IN_CUSTOMER_RETURN")]
    InCustomerReturn,
    #[serde(rename = "IN_INVENTORY")]
    InInventory,
    #[serde(rename = "IN_PRODUCTION_ORDER")]
    InProductionOrder,
    #[serde(rename = "IN_PURCHASE_ORDER")]
    InPurchaseOrder,
    #[serde(rename = "IN_SHIPMENT")]
    InShipment,
    #[serde(rename = "IN_SHIPMENT_CANCELLATION")]
    InShipmentCancellation,
    #[serde(rename = "IN_SHIPMENT_CONSIGNMENT")]
    InShipmentConsignment,
    #[serde(rename = "IN_SHIPMENT_INTERNAL")]
    InShipmentInternal,
    #[serde(rename = "IN_THIRD_PARTY_DEAL")]
    InThirdPartyDeal,
    #[serde(rename = "OUT")]
    Out,
    #[serde(rename = "OUT_INVENTORY")]
    OutInventory,
    #[serde(rename = "OUT_PRODUCTION_ORDER")]
    OutProductionOrder,
    #[serde(rename = "OUT_SALES_ORDER")]
    OutSalesOrder,
    #[serde(rename = "OUT_SHIPMENT")]
    OutShipment,
    #[serde(rename = "OUT_SHIPMENT_CANCELLATION")]
    OutShipmentCancellation,
    #[serde(rename = "OUT_SHIPMENT_CONSIGNMENT")]
    OutShipmentConsignment,
    #[serde(rename = "OUT_SHIPMENT_INTERNAL")]
    OutShipmentInternal,
    #[serde(rename = "OUT_THIRD_PARTY_DEAL")]
    OutThirdPartyDeal,
    #[serde(rename = "TRANSFER")]
    Transfer,
}

impl Default for StockMovementType {
    fn default() -> StockMovementType {
        Self::In
    }
}
